// RobotBuilder Version: 5.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;


// import frc.robot.commands.*;
// import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj2.command.SubsystemBase;


import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.PneumaticsModuleType;
import edu.wpi.first.wpilibj.DoubleSolenoid.Value;




/**
 *
 */
public class Arm extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
private DoubleSolenoid armValve;
private DoubleSolenoid shooterValve;
private DoubleSolenoid intakeValve;


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    /**
    *
    */
    public Arm() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
armValve = new DoubleSolenoid(8, PneumaticsModuleType.REVPH, 4, 5);
 addChild("armValve", armValve);
 
 shooterValve = new DoubleSolenoid(8, PneumaticsModuleType.REVPH, 4, 5);
 addChild("armValve", shooterValve);

 intakeValve = new DoubleSolenoid(8, PneumaticsModuleType.REVPH, 4, 5);
 addChild("armValve", intakeValve);



    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run

    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void my_ArmRaise(){
        armValve.set(Value.kForward);
    }
    public void my_ArmLower(){
        armValve.set(Value.kReverse);
    }

    public void my_ShooterRaise(){
        shooterValve.set(Value.kForward);
    }
    public void my_ShooterLower(){
        shooterValve.set(Value.kReverse);
    }

    public void my_IntakeOpen(){
        intakeValve.set(Value.kForward);
    }
    public void my_IntakeClose(){
        intakeValve.set(Value.kReverse);
    }

}

