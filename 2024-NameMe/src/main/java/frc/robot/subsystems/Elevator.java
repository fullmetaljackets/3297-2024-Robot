// RobotBuilder Version: 5.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;


import com.revrobotics.CANSparkBase.IdleMode;
import com.revrobotics.CANSparkLowLevel.MotorType;
import com.revrobotics.CANSparkMax;
import com.revrobotics.RelativeEncoder;
import com.revrobotics.SparkPIDController;

import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.SubsystemBase;




/**
 *
 */
public class Elevator extends SubsystemBase{ 
    private CANSparkMax elevatorMotor;
    private DigitalInput topLimitSwitch = new DigitalInput(0);
    private DigitalInput bottomLimitSwitch = new DigitalInput(1);

    // FEP (Find Elevator Position)
    private SparkPIDController m_pidController;
    private RelativeEncoder m_encoder;
    public double kP, kI, kD, kIz, kFF, kMaxOutput, kMinOutput;
    // FEP end

    
    /**
    *
    */
    public Elevator() {
        elevatorMotor = new CANSparkMax(10, MotorType.kBrushless);
        elevatorMotor.restoreFactoryDefaults();  
        elevatorMotor.setInverted(false);
        elevatorMotor.setIdleMode(IdleMode.kBrake);
        elevatorMotor.burnFlash();
   
        // FEP start
        // /**
        //  * In order to use PID functionality for a controller, a SparkPIDController object
        //  * is constructed by calling the getPIDController() method on an existing
        //  * CANSparkMax object
        //  */
        // m_pidController = elevatorMotor.getPIDController();

        // // Encoder object created to display position values
        // m_encoder = elevatorMotor.getEncoder();

        // // PID coefficients
        // kP = 0.1; 
        // kI = 1e-4;
        // kD = 1; 
        // kIz = 0; 
        // kFF = 0; 
        // kMaxOutput = 1; 
        // kMinOutput = -1;

        // // set PID coefficients
        // m_pidController.setP(kP);
        // m_pidController.setI(kI);
        // m_pidController.setD(kD);
        // m_pidController.setIZone(kIz);
        // m_pidController.setFF(kFF);
        // m_pidController.setOutputRange(kMinOutput, kMaxOutput);

        // // display PID coefficients on SmartDashboard
        // SmartDashboard.putNumber("P Gain", kP);
        // SmartDashboard.putNumber("I Gain", kI);
        // SmartDashboard.putNumber("D Gain", kD);
        // SmartDashboard.putNumber("I Zone", kIz);
        // SmartDashboard.putNumber("Feed Forward", kFF);
        // SmartDashboard.putNumber("Max Output", kMaxOutput);
        // SmartDashboard.putNumber("Min Output", kMinOutput);
        // SmartDashboard.putNumber("Set Rotations", 0);
        // // FEP end
   }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run

    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void my_motorrun(double setpoint){
        // elevatorMotor.set(setpoint);
        if (setpoint > 0) {
            if (topLimitSwitch.get()) {
                // We're going up and top limit is reached so stop
               elevatorMotor.set(0);
                // elevatorMotor.set(setpoint);
            } else {
                // We're going up but top limit is not tripped so go at command speed
                elevatorMotor.set(setpoint);
            }
        } else {
            if (bottomLimitSwitch.get()) {
                // We're going down and bottom limit is reached so stop
               elevatorMotor.set(0);
                // elevatorMotor.set(setpoint);
            } else {
                // We're going down but bottom limit is not tripped so go at command speed
                elevatorMotor.set(setpoint);
            }
        }

        // // FEP start
        // // read PID coefficients from SmartDashboard
        // double p = SmartDashboard.getNumber("P Gain", 0);
        // double i = SmartDashboard.getNumber("I Gain", 0);
        // double d = SmartDashboard.getNumber("D Gain", 0);
        // double iz = SmartDashboard.getNumber("I Zone", 0);
        // double ff = SmartDashboard.getNumber("Feed Forward", 0);
        // double max = SmartDashboard.getNumber("Max Output", 0);
        // double min = SmartDashboard.getNumber("Min Output", 0);
        // double rotations = SmartDashboard.getNumber("Set Rotations", 0);

        // // if PID coefficients on SmartDashboard have changed, write new values to controller
        // if((p != kP)) { m_pidController.setP(p); kP = p; }
        // if((i != kI)) { m_pidController.setI(i); kI = i; }
        // if((d != kD)) { m_pidController.setD(d); kD = d; }
        // if((iz != kIz)) { m_pidController.setIZone(iz); kIz = iz; }
        // if((ff != kFF)) { m_pidController.setFF(ff); kFF = ff; }
        // if((max != kMaxOutput) || (min != kMinOutput)) { 
        //     m_pidController.setOutputRange(min, max); 
        //     kMinOutput = min; kMaxOutput = max; 
        // }

        // /**
        //  * PIDController objects are commanded to a set point using the 
        //  * SetReference() method.
        //  * 
        //  * The first parameter is the value of the set point, whose units vary
        //  * depending on the control type set in the second parameter.
        //  * 
        //  * The second parameter is the control type can be set to one of four 
        //  * parameters:
        //  *  com.revrobotics.CANSparkMax.ControlType.kDutyCycle
        //  *  com.revrobotics.CANSparkMax.ControlType.kPosition
        //  *  com.revrobotics.CANSparkMax.ControlType.kVelocity
        //  *  com.revrobotics.CANSparkMax.ControlType.kVoltage
        //  */
        // m_pidController.setReference(rotations, CANSparkMax.ControlType.kPosition);
        
        // SmartDashboard.putNumber("SetPoint", rotations);
        // SmartDashboard.putNumber("ProcessVariable", m_encoder.getPosition());
        // FEP end

        //DriverStation.reportError("******** elevatorMotor **************", false);
    }
}

